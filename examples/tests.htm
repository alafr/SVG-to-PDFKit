<!DOCTYPE html>
<html>
<head>
<title>SVG-to-PDFKit test</title>
<script src="pdfkit.js"></script>
<script src="blobstream.js"></script>
<script src="../source.js"></script>
<script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
<script src="https://huddle.github.io/Resemble.js/resemble.js"></script>
<script src="tests.js"></script>
<script>
// Previous results to check for regression (tests ran with Chrome) are inserted below and updated periodically.
// Then, when the tests are ran, any different result will appear in bold. All bold values need to be checked manually
// because a green value (less difference between svg-to-pdfkit's and the browser's output) could potentially indicate 
// a regression and a red value a improvement. The data below is generated with the "Download results" link.

var PreviousResults = {"color-prop-01-b.svg":0.24,"color-prop-02-f.svg":0.12,"color-prop-03-t.svg":0.12,"color-prop-05-t.svg":13.14,"coords-coord-01-t.svg":0.12,"coords-coord-02-t.svg":0.11,"coords-trans-01-b.svg":0.51,"coords-trans-02-t.svg":0.31,"coords-trans-03-t.svg":0.25,"coords-trans-04-t.svg":0.16,"coords-trans-05-t.svg":0.27,"coords-trans-06-t.svg":0.29,"coords-trans-07-t.svg":0.27,"coords-trans-08-t.svg":0.25,"coords-trans-09-t.svg":0.77,"coords-trans-10-f.svg":0.18,"coords-trans-11-f.svg":0.18,"coords-trans-12-f.svg":0.18,"coords-trans-13-f.svg":0.14,"coords-trans-14-f.svg":0.15,"coords-transformattr-01-f.svg":0.11,"coords-transformattr-02-f.svg":0.12,"coords-transformattr-03-f.svg":0.12,"coords-transformattr-04-f.svg":0.12,"coords-transformattr-05-f.svg":0.12,"coords-units-01-b.svg":1.12,"coords-units-02-b.svg":1.55,"coords-units-03-b.svg":1.44,"coords-viewattr-01-b.svg":0.68,"coords-viewattr-02-b.svg":0.75,"coords-viewattr-03-b.svg":1.62,"imp-path-01-f.svg":0.19,"masking-filter-01-f.svg":0.3,"masking-intro-01-f.svg":0.49,"masking-mask-01-b.svg":0.72,"masking-mask-02-f.svg":0.12,"masking-opacity-01-b.svg":1.34,"masking-path-01-b.svg":0.54,"masking-path-02-b.svg":0.63,"masking-path-03-b.svg":0.65,"masking-path-04-b.svg":0.26,"masking-path-05-f.svg":0.31,"masking-path-07-b.svg":0.27,"masking-path-08-b.svg":0.29,"masking-path-10-b.svg":0.26,"masking-path-11-b.svg":0.14,"masking-path-13-f.svg":0.12,"masking-path-14-f.svg":0.12,"metadata-example-01-t.svg":0.27,"painting-control-01-f.svg":0.12,"painting-control-02-f.svg":0.12,"painting-control-03-f.svg":0.12,"painting-control-04-f.svg":0.12,"painting-control-05-f.svg":0.12,"painting-control-06-f.svg":0.12,"painting-fill-01-t.svg":0.62,"painting-fill-02-t.svg":0.75,"painting-fill-03-t.svg":0.61,"painting-fill-04-t.svg":0.12,"painting-fill-05-b.svg":0.12,"painting-marker-01-f.svg":0.35,"painting-marker-02-f.svg":0.41,"painting-marker-04-f.svg":0.27,"painting-marker-06-f.svg":0.35,"painting-marker-07-f.svg":0.12,"painting-stroke-01-t.svg":0.62,"painting-stroke-02-t.svg":0.9,"painting-stroke-03-t.svg":0.9,"painting-stroke-04-t.svg":0.75,"painting-stroke-05-t.svg":2.11,"painting-stroke-06-t.svg":0.11,"painting-stroke-07-t.svg":0.11,"painting-stroke-08-t.svg":0.07,"painting-stroke-09-t.svg":0.11,"painting-stroke-10-t.svg":0.4,"paths-data-01-t.svg":0.38,"paths-data-02-t.svg":0.43,"paths-data-03-f.svg":0.38,"paths-data-04-t.svg":0.47,"paths-data-05-t.svg":0.35,"paths-data-06-t.svg":0.26,"paths-data-07-t.svg":0.29,"paths-data-08-t.svg":0.5,"paths-data-09-t.svg":0.35,"paths-data-10-t.svg":1.04,"paths-data-12-t.svg":0.12,"paths-data-13-t.svg":0.12,"paths-data-14-t.svg":0.12,"paths-data-15-t.svg":0.12,"paths-data-16-t.svg":0.29,"paths-data-17-f.svg":0.12,"paths-data-18-f.svg":0.12,"paths-data-19-f.svg":0.11,"paths-data-20-f.svg":5.04,"pservers-grad-01-b.svg":0.45,"pservers-grad-02-b.svg":6.08,"pservers-grad-03-b.svg":0.54,"pservers-grad-04-b.svg":6.86,"pservers-grad-05-b.svg":12.18,"pservers-grad-06-b.svg":1.96,"pservers-grad-07-b.svg":8.09,"pservers-grad-08-b.svg":8.64,"pservers-grad-09-b.svg":0.24,"pservers-grad-10-b.svg":12.98,"pservers-grad-11-b.svg":11.11,"pservers-grad-12-b.svg":6.29,"pservers-grad-13-b.svg":16.32,"pservers-grad-14-b.svg":10.25,"pservers-grad-15-b.svg":2.89,"pservers-grad-16-b.svg":1.88,"pservers-grad-17-b.svg":3.68,"pservers-grad-18-b.svg":5.9,"pservers-grad-20-b.svg":3.67,"pservers-grad-21-b.svg":3.09,"pservers-grad-22-b.svg":2.93,"pservers-grad-23-f.svg":0.19,"pservers-grad-24-f.svg":0.31,"pservers-grad-stops-01-f.svg":0.19,"pservers-pattern-01-b.svg":2.84,"pservers-pattern-02-f.svg":0.05,"pservers-pattern-03-f.svg":45.91,"pservers-pattern-04-f.svg":0.12,"pservers-pattern-05-f.svg":0.19,"pservers-pattern-06-f.svg":0.19,"pservers-pattern-07-f.svg":0.19,"pservers-pattern-08-f.svg":0.19,"pservers-pattern-09-f.svg":41.86,"render-elems-01-t.svg":0.18,"render-elems-02-t.svg":0.2,"render-elems-03-t.svg":0.24,"render-elems-06-t.svg":0.24,"render-elems-07-t.svg":0.26,"render-elems-08-t.svg":0.27,"render-groups-01-b.svg":0.13,"render-groups-03-t.svg":0.23,"shapes-circle-01-t.svg":0.11,"shapes-circle-02-t.svg":0.12,"shapes-ellipse-01-t.svg":0.16,"shapes-ellipse-02-t.svg":0.12,"shapes-ellipse-03-f.svg":0.14,"shapes-grammar-01-f.svg":0.12,"shapes-intro-01-t.svg":0.27,"shapes-intro-02-f.svg":0.11,"shapes-line-01-t.svg":0.12,"shapes-line-02-f.svg":0.12,"shapes-polygon-01-t.svg":0.11,"shapes-polygon-02-t.svg":0.12,"shapes-polygon-03-t.svg":0.12,"shapes-polyline-01-t.svg":0.12,"shapes-polyline-02-t.svg":0.12,"shapes-rect-01-t.svg":0.14,"shapes-rect-02-t.svg":0.12,"shapes-rect-03-t.svg":0.12,"shapes-rect-04-f.svg":0.12,"shapes-rect-05-f.svg":0.12,"shapes-rect-06-f.svg":0.12,"shapes-rect-07-f.svg":0.12,"struct-defs-01-t.svg":0.12,"struct-frag-01-t.svg":0,"struct-frag-02-t.svg":0,"struct-frag-03-t.svg":0,"struct-frag-04-t.svg":0,"struct-frag-06-t.svg":0.52,"struct-group-01-t.svg":0.12,"struct-group-02-b.svg":0.12,"struct-group-03-t.svg":1.1,"struct-svg-03-f.svg":0.19,"struct-symbol-01-b.svg":31.75,"struct-use-01-t.svg":0.44,"struct-use-03-t.svg":0.2,"struct-use-09-b.svg":9.91,"struct-use-12-f.svg":0.12,"styling-inherit-01-b.svg":5.25,"styling-pres-01-t.svg":0.11,"text-align-01-b.svg":0.5,"text-align-02-b.svg":1.18,"text-align-03-b.svg":0.54,"text-align-04-b.svg":0.52,"text-align-05-b.svg":1.74,"text-align-06-b.svg":2.47,"text-align-07-t.svg":1.31,"text-align-08-b.svg":6.79,"text-bidi-01-t.svg":0.6,"text-deco-01-b.svg":1.19,"text-fonts-01-t.svg":1.66,"text-fonts-02-t.svg":0.53,"text-fonts-03-t.svg":0.91,"text-fonts-04-t.svg":0.91,"text-fonts-05-f.svg":0.31,"text-fonts-202-t.svg":0.82,"text-fonts-203-t.svg":5,"text-fonts-204-t.svg":5.07,"text-intro-01-t.svg":3.54,"text-intro-02-b.svg":4.05,"text-intro-03-b.svg":4.47,"text-intro-04-t.svg":6.02,"text-intro-05-t.svg":7.09,"text-intro-06-t.svg":9.05,"text-intro-07-t.svg":9.05,"text-intro-09-b.svg":4.04,"text-intro-10-f.svg":7.17,"text-intro-11-t.svg":5.51,"text-intro-12-t.svg":9.05,"text-path-01-b.svg":0.88,"text-path-02-b.svg":0.83,"text-spacing-01-b.svg":1.72,"text-text-01-b.svg":4.58,"text-text-03-b.svg":1.59,"text-text-04-t.svg":0.72,"text-text-05-t.svg":0.43,"text-text-06-t.svg":0.26,"text-text-07-t.svg":0.34,"text-text-08-b.svg":1.91,"text-text-09-t.svg":0.35,"text-text-10-t.svg":2.02,"text-text-11-t.svg":2.02,"text-text-12-t.svg":0.6,"text-tspan-01-b.svg":2.42,"text-tspan-02-b.svg":0.35,"text-ws-01-t.svg":1.77,"text-ws-02-t.svg":1.84,"text-ws-03-t.svg":0.46,"types-basic-01-f.svg":0.27};

// To do: add in the subsetted font all the glyphs needed for the tests.
function FontBuffer(base64) {
  base64 = atob(base64);
  var ab = new ArrayBuffer(base64.length);
  var data = new Uint8Array(ab); for (var i = 0; i < base64.length; i++) {data[i] = base64.charCodeAt(i);}
  return(ab);
}
var FontData = '';

var StyleText = '@font-face {font-family: MyFont; src: url(data:application/font-woff;charset=utf-8;base64,'
              + FontData + ') format(\'woff\');} text,tspan,textPath{font-family:MyFont;}';

var DocWidth = 480, DocHeight = 360, TestResults, HiddenUnchanged = false;

function ShowHideUnchanged() {
  if (HiddenUnchanged) {
    document.getElementById('DynamicStyle').textContent = '';
  } else {
    document.getElementById('DynamicStyle').textContent = '.ResultSame{display:none;}';
  }
  HiddenUnchanged = !HiddenUnchanged;
}

// Run automatically all the tests starting from n
function Automate(n) {
  var Test = Tests[n];
  if (!Test) {
    document.getElementById('Log').innerHTML += '<p><a download="Results.json" href="' + URL.createObjectURL(new Blob(['var PreviousResults = ' + JSON.stringify(TestResults, null, 0) + ';'], {type : 'application/json'})) + '">Download results</a></p>';
    document.getElementById('Log').innerHTML += '<p><a href="javascript:ShowHideUnchanged()">Show/hide unchanged</a></p>';
    return;
  }
  // Append the result after a each completed test
  var Callback = function(e) {
    var Result, Class = 'ResultSame';
    if (e.error) {
      ResultString = Test.name + ', ' + 'Error' + ', ' + e.error;
      TestResults[Test.name] = 'Error';
      if (PreviousResults[Test.name] !== 'Error') {Class = 'ResultWorse';}
    } else {
      ResultString = Test.name + ', ' + e.result.misMatchPercentage + '%';
      TestResults[Test.name] = parseFloat(e.result.misMatchPercentage);
      if (PreviousResults[Test.name] === 'Error') {Class = 'ResultBetter';}
      else if (PreviousResults[Test.name] < TestResults[Test.name]) {Class = 'ResultWorse';}
      else if (PreviousResults[Test.name] > TestResults[Test.name]) {Class = 'ResultBetter';}
    }
    if (Class !== 'ResultSame') {
      ResultString += ', previously ' + (PreviousResults[Test.name] === 'Error' ? 'Error' : PreviousResults[Test.name] + '%');
    }
    document.getElementById('Log').innerHTML += '<p class="' + Class + '"><a href="javascript:document.getElementById(\'svg-input\').value=Tests[' + n + '].svg;RunTest(Tests[' + n + '].svg, DefaultCallBack)">' + ResultString + '</a></p>';
    Automate(++n);
  }
  RunTest(Test.svg, Callback);
}
// Display the result after a single test is completed
function DefaultCallBack(e) {
  if (e.error) {
    document.getElementById('Percentage').innerText = 'Error';
    console.log(e.error);
  } else {
    document.getElementById('Percentage').innerText = e.result.misMatchPercentage + '%';
    document.getElementById('Canvas1').innerHTML = '<img src="' + e.image1 + '">';
    document.getElementById('Canvas2').innerHTML = '<img src="' + e.image2 + '">';
    document.getElementById('CanvasDiff').innerHTML = '<img src="' + e.result.getImageDataUrl() + '">';
  }
  if (e.pdf) {
    document.getElementById('Download').innerHTML = '<a download="file.pdf" href="' + URL.createObjectURL(e.pdf) + '">Download PDF</a>'
  }
}
// Run one test, then call Callback({test result object})
function RunTest(Svg, Callback) {
  var PdfBlob;
  // Compare the two canvas elements with resemble.js
  function Compare() {
    var image1 = Canvas1.toDataURL();
    var image2 = Canvas2.toDataURL();
    resemble.outputSettings({useCrossOrigin: false, transparency: 0, errorColor: {red:0,green:0,blue:0}});
    resemble(image1).compareTo(image2).ignoreAntialiasing().onComplete(function(data){
      Callback({image1: image1, image2: image2, result: data, pdf: PdfBlob});
    });
  }
  var Successes = 0, Errors = 0, Canvas1 = document.createElement('canvas'), Canvas2 = document.createElement('canvas');
  // Create a new PDF document and insert the SVG with svg-to-pdfkit, and then render the pdf inside a canvas with PDF.js
  function RunSvgToPdfKit() {
    var doc = new PDFDocument({size: [DocWidth * 72/96, DocHeight * 72/96], compress:false});
    var fontCallback = function(family, bold, italic, fontOptions) {
      if (italic) {fontOptions.fauxItalic = true;}
      if (bold) {fontOptions.fauxBold = true;}
      return FontBuffer(FontData);
    };
    try {
      SVGtoPDF(doc, Svg, 0, 0, {fontCallback: fontCallback});
    } catch(e) {
      if (++Errors === 1) {Callback({error: e});}
      return;
    }
    var stream = doc.pipe(blobStream());
    stream.on('finish', function() {
      PdfBlob = stream.toBlob('application/pdf');
      var abreader = new FileReader();
      abreader.onload = function(e) {
        PDFJS.disableWorker = true;
        PDFJS.disableFontFace = true;
        PDFJS.getDocument({data:abreader.result}).then(function(pdf) {
          pdf.getPage(1).then(function(page) {
            var viewport = page.getViewport(96/72);
            var context = Canvas1.getContext('2d');
            Canvas1.width = DocWidth;
            Canvas1.height = DocHeight;
            page.render({canvasContext: context, viewport: viewport}).then(function() {
              if (++Successes === 2) {Compare();}
            });
          });
        });
      };
      abreader.readAsArrayBuffer(PdfBlob);
    });
    doc.end();
  }
  // Draw the SVG image directly inside an HTML canvas
  function RunNative() {
    var image = new Image();
    image.onload = function () {
      var context = Canvas2.getContext('2d');
      Canvas2.width = DocWidth;
      Canvas2.height = DocHeight;
      context.rect(0, 0, Canvas2.width, Canvas2.height);
      context.fillStyle = 'white';
      context.fill();
      context.drawImage(image, 0, 0, Canvas2.width, Canvas2.height);
      if (++Successes === 2) {Compare();}
    }
    image.onerror = function() {
      if (++Errors === 1) {Callback({error: new Error('Rendering of svg inside the canvas with the native function failed')});}
    }
    image.src = 'data:image/svg+xml,' + encodeURI('<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><style>' + StyleText + '</style>' + Svg + '</svg>');
  }
  RunSvgToPdfKit();
  RunNative();
}
</script>
<style>
body{margin:0;}
div#col1{position:fixed;height:100%;width:50%;top:0;left:0;overflow:auto;}
textarea#svg-input{width:100%;height:120px;box-sizing:border-box;resize:vertical;}
canvas{border:1px dotted green;}
div#col2{position:fixed;height:100%;width:50%;top:0;right:0;;overflow:auto;}
h1{margin:10px;font-family:sans-serif;color:#555555;}
a{text-decoration:none;color:#66a8a8;}
p,h2{margin:8px;}
.ResultSame{}
.ResultBetter,.ResultBetter>a{color:green;font-weight:bold}
.ResultWorse,.ResultWorse>a{color:red;font-weight:bold}
</style>
<style id="DynamicStyle">
</style>
</head>
<body onload="RunTest(document.getElementById('svg-input').value, DefaultCallBack)">
<div id="col1">
<h1><a href="https://github.com/alafr/SVG-to-PDFKit">SVG-to-PDFKit</a> test page</h1>
<form>
<textarea id="svg-input" onblur="RunTest(document.getElementById('svg-input').value, DefaultCallBack)" placeholder="Paste svg code here, then click out of this textarea">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <svg viewBox="0 0 200 100" preserveAspectRatio="none" >
    <rect height="100%" width="100%" fill="yellow"/>
    <path id="cloud" fill="grey" d="M10,25 C10,20 35,15 35,20 C35,10 55,10 55,15 C60,13 65,20 65,25 C65,30 45,40 45,35 C45,50 25,40 25,35 C20,40 10,35 10,25 Z"/>
    <use xlink:href="#cloud" transform="scale(-1,1.1) translate(-140, -10)"/>
    <use xlink:href="#cloud" transform="scale(1.1,0.9) translate(115, 10)"/>
    <ellipse cx="50%" cy="120%" rx="50%" ry="100%" fill="red" />
  </svg>
  <svg viewBox="0 0 100 100" x="50%" width="200" y="50%" height="200" >
    <rect fill="blue" width="200" height="200" stroke="red" stroke-width="1"/>
  </svg>
</svg>
</textarea>
<h2><a href="javascript:TestResults={};document.getElementById('Log').innerHTML='';Automate(0)">Run all tests</a></h2>
</form>
<span id="Log"></span>
</div>
<div id="col2">
<br>Difference: <span id="Percentage"></span><br>
<span id="CanvasDiff"></span>
<br>SVG-to-PDFKit: <span id="Download"></span><br>
<span id="Canvas1"></span>
<br>Browser's SVG:<br>
<span id="Canvas2"></span>
</div>
</body>
</html>
